/// <reference types="node" />
import { ActionSequence, By, WebElement } from 'selenium-webdriver';
import { Collection } from './collection';
import { Condition } from './condition';
import { Configuration } from './configuration';
import { Element } from './element';
import { SearchContext } from './locators/searchContext';
import { Wait } from './wait';
export declare class Driver implements SearchContext {
    readonly configuration: Configuration;
    readonly wait: Wait<Driver>;
    constructor(customConfiguration?: Configuration);
    open(url: string): Promise<Driver>;
    resizeWindow(width?: number, height?: number): Promise<Driver>;
    close(): Promise<Driver>;
    quit(): Promise<Driver>;
    refresh(): Promise<Driver>;
    acceptAlert(): Promise<Driver>;
    url(): Promise<string>;
    title(): Promise<string>;
    pageSource(): Promise<string>;
    executeScript(script: string | Function, ...args: any[]): Promise<any>;
    getTabs(): Promise<any>;
    nextTab(): Promise<Driver>;
    previousTab(): Promise<Driver>;
    switchToTab(tabId: string): Promise<Driver>;
    switchToFrame(frameElement: Element): Promise<Driver>;
    switchToDefaultFrame(): Promise<Driver>;
    clearCacheAndCookies(): Promise<Driver>;
    screenshot(): Promise<Buffer>;
    actions(): ActionSequence;
    element(cssOrXpathOrBy: string | By): Element;
    all(cssOrXpathOrBy: string | By): Collection;
    wrapElement(webelement: WebElement): Element;
    wrapAll(webelements: WebElement[]): Collection;
    should(condition: Condition<Driver>, timeout?: number): Promise<Driver>;
    shouldNot(condition: Condition<Driver>, timeout?: number): Promise<Driver>;
    is(condition: Condition<Driver>, timeout?: number): Promise<boolean>;
    isNot(condition: Condition<Driver>, timeout?: number): Promise<boolean>;
    findElements(locator: By): Promise<WebElement[]>;
    findElement(locator: By): Promise<WebElement>;
    toString(): string;
}
