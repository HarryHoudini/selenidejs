/// <reference types="node" />
import { Collection } from './collection';
import { Driver } from './driver';
import { Element } from './element';
export declare namespace Actions {
    const click: (element: Element) => Promise<Element>;
    const contextClick: (element: Element) => Promise<Element>;
    function doubleClick(element: Element): Promise<Element>;
    function hover(element: Element): Promise<Element>;
    function pressKey(key: string): (element: Element) => Promise<Element>;
    const pressEnter: (element: Element) => Promise<Element>;
    const pressEscape: (element: Element) => Promise<Element>;
    const pressTab: (element: Element) => Promise<Element>;
    function scrollTo(element: Element): Promise<Element>;
    function sendKeys(value: string | number): (element: Element) => Promise<Element>;
    function setValue(value: string | number): (element: Element) => Promise<Element>;
    const visibility: (element: Element) => Promise<boolean>;
    const presence: (element: Element) => Promise<boolean>;
    const focused: (element: Element) => Promise<boolean>;
    const text: (element: Element) => Promise<any>;
    function attribute(attributeName: string): (element: any) => Promise<any>;
    const size: (collection: Collection) => Promise<number>;
    function open(url: string): (driver: Driver) => Promise<Driver>;
    function resizeWindow(width: number, height: number): (driver: Driver) => Promise<Driver>;
    const refresh: (driver: Driver) => Promise<Driver>;
    const acceptAlert: (driver: Driver) => Promise<Driver>;
    const url: (driver: Driver) => Promise<any>;
    const title: (driver: Driver) => Promise<any>;
    const pageSource: (driver: Driver) => Promise<any>;
    function executeScript(script: string | Function, ...args: any[]): (driver: Driver) => Promise<any>;
    const tabs: (driver: Driver) => Promise<any>;
    const nextTab: (driver: Driver) => Promise<Driver>;
    const previousTab: (driver: Driver) => Promise<Driver>;
    function switchToTab(tabId: string): (driver: Driver) => Promise<Driver>;
    function switchToFrame(frameElement: Element): (driver: Driver) => Promise<Driver>;
    const switchToDefaultFrame: (driver: Driver) => Promise<Driver>;
    const clearCacheAndCookies: (driver: Driver) => Promise<Driver>;
    function close(driver: Driver): Promise<Driver>;
    function quit(driver: Driver): Promise<Driver>;
    function screenshot(driver: Driver): Promise<Buffer>;
}
